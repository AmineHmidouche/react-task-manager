{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\react-task-tracker\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Tasks from './components/Tasks';\nimport Header from './components/Header';\nimport AddTask from './components/AddTask';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); // Fetch tasks \n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }; // Fetch task \n\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/e${id}`);\n    const data = await res.json();\n    return data;\n  }; // Add task\n\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]); // const id = Math.floor(Math.random()* 1000) + 1\n    // const newTask = {id , ...task}\n    // setTasks([...tasks , newTask])\n  }; // Delete Task \n\n\n  const deleteTask = async id => {\n    // console.log('delete Task ' , id)\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // Toggle Reminder \n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updtTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updtTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 20\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 16\n    }, this) : 'No tasks To show !']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"l0znokEv4xaNawFte18f2HGKyzo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/laragon/www/react-task-tracker/src/App.js"],"names":["Tasks","Header","AddTask","useState","useEffect","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","addTask","task","method","headers","body","JSON","stringify","deleteTask","filter","toggleReminder","taskToToggle","updtTask","reminder","map","length"],"mappings":"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","sourcesContent":["\nimport Tasks from './components/Tasks';\nimport Header from './components/Header';\nimport AddTask from './components/AddTask';\n\nimport  {useState , useEffect} from 'react' ;\n\nfunction App() {\n\n  const   [showAddTask, setShowAddTask] = useState(false)\n  const   [tasks , setTasks] = useState([])\n  useEffect(() =>{\n   const getTasks = async () => {\n     const tasksFromServer = await fetchTasks()\n     setTasks(tasksFromServer)\n   }\n    getTasks()\n  },\n  [])\n  \n// Fetch tasks \nconst fetchTasks = async () => {\n  const res = await fetch('http://localhost:5000/tasks')\n  const data = await res.json()\n  return data\n}\n// Fetch task \nconst fetchTask = async (id) => {\n  const res = await fetch(`http://localhost:5000/tasks/e${id}`)\n  const data = await res.json()\n  return data\n}\n\n// Add task\nconst addTask =async  (task) => {\n  const res = await fetch('http://localhost:5000/tasks' ,{ \n  method:'POST' ,\n  headers : {'Content-type':'application/json' },\n  body : JSON.stringify(task) ,\n\n  })\n  const data = await res.json()\n  setTasks([...tasks , data])\n  // const id = Math.floor(Math.random()* 1000) + 1\n  // const newTask = {id , ...task}\n  // setTasks([...tasks , newTask])\n}\n\n// Delete Task \nconst deleteTask = async (id) => {\n// console.log('delete Task ' , id)\nawait fetch(`http://localhost:5000/tasks/${id}`,{\n  method: 'DELETE' ,\n})\nsetTasks(tasks.filter((task) => task.id !== id\n\n))\n}\n\n// Toggle Reminder \n\nconst toggleReminder = async (id) =>{\n  const taskToToggle = await fetchTask(id)\n  const updtTask = {...taskToToggle , reminder : !taskToToggle.reminder}\n  const res = await fetch(`http://localhost:5000/tasks/${id}`,{\n    method: 'PUT' ,\n    headers : {'Content-type':'application/json' },\n    body : JSON.stringify(updtTask) ,\n  })\nconst data = await res.json()\n  \n  setTasks(tasks.map((task) =>\n\n  task.id === id ? {... task , reminder : data.reminder} : task \n\n  ))\n}\n\n \n  return (\n    <div className=\"container\">\n   <Header \n       onAdd={()=> setShowAddTask(!showAddTask) }\n       showAdd={showAddTask}\n    />\n  { showAddTask && <AddTask onAdd={addTask} />}\n    {\n            tasks.length > 0 ?\n              (<Tasks \n                tasks={tasks} \n                onDelete={deleteTask}\n                onToggle={toggleReminder}\n                />)\n              : 'No tasks To show !'\n     }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}